// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_camera_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_camera_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_camera_5fservice_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_camera_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_camera_5fservice_2eproto;
class CameraDataRequest;
struct CameraDataRequestDefaultTypeInternal;
extern CameraDataRequestDefaultTypeInternal _CameraDataRequest_default_instance_;
class CameraDataResponse;
struct CameraDataResponseDefaultTypeInternal;
extern CameraDataResponseDefaultTypeInternal _CameraDataResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::CameraDataRequest* Arena::CreateMaybeMessage<::CameraDataRequest>(Arena*);
template <>
::CameraDataResponse* Arena::CreateMaybeMessage<::CameraDataResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE


// ===================================================================


// -------------------------------------------------------------------

class CameraDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CameraDataRequest) */ {
 public:
  inline CameraDataRequest() : CameraDataRequest(nullptr) {}
  ~CameraDataRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CameraDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraDataRequest(const CameraDataRequest& from);
  CameraDataRequest(CameraDataRequest&& from) noexcept
    : CameraDataRequest() {
    *this = ::std::move(from);
  }

  inline CameraDataRequest& operator=(const CameraDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraDataRequest& operator=(CameraDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraDataRequest* internal_default_instance() {
    return reinterpret_cast<const CameraDataRequest*>(
               &_CameraDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraDataRequest& a, CameraDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraDataRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraDataRequest& from) {
    CameraDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CameraDataRequest";
  }
  protected:
  explicit CameraDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kFrameNumberFieldNumber = 3,
  };
  // bytes image = 1;
  void clear_image() ;
  const std::string& image() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image(Arg_&& arg, Args_... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* ptr);

  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(
      const std::string& value);
  std::string* _internal_mutable_image();

  public:
  // string timestamp = 2;
  void clear_timestamp() ;
  const std::string& timestamp() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* ptr);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // int32 frameNumber = 3;
  void clear_framenumber() ;
  ::int32_t framenumber() const;
  void set_framenumber(::int32_t value);

  private:
  ::int32_t _internal_framenumber() const;
  void _internal_set_framenumber(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CameraDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
    ::int32_t framenumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fservice_2eproto;
};// -------------------------------------------------------------------

class CameraDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CameraDataResponse) */ {
 public:
  inline CameraDataResponse() : CameraDataResponse(nullptr) {}
  ~CameraDataResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CameraDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraDataResponse(const CameraDataResponse& from);
  CameraDataResponse(CameraDataResponse&& from) noexcept
    : CameraDataResponse() {
    *this = ::std::move(from);
  }

  inline CameraDataResponse& operator=(const CameraDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraDataResponse& operator=(CameraDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraDataResponse* internal_default_instance() {
    return reinterpret_cast<const CameraDataResponse*>(
               &_CameraDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CameraDataResponse& a, CameraDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraDataResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraDataResponse& from) {
    CameraDataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CameraDataResponse";
  }
  protected:
  explicit CameraDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcknowledgmentFieldNumber = 1,
  };
  // string acknowledgment = 1;
  void clear_acknowledgment() ;
  const std::string& acknowledgment() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_acknowledgment(Arg_&& arg, Args_... args);
  std::string* mutable_acknowledgment();
  PROTOBUF_NODISCARD std::string* release_acknowledgment();
  void set_allocated_acknowledgment(std::string* ptr);

  private:
  const std::string& _internal_acknowledgment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acknowledgment(
      const std::string& value);
  std::string* _internal_mutable_acknowledgment();

  public:
  // @@protoc_insertion_point(class_scope:CameraDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acknowledgment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CameraDataRequest

// bytes image = 1;
inline void CameraDataRequest::clear_image() {
  _impl_.image_.ClearToEmpty();
}
inline const std::string& CameraDataRequest::image() const {
  // @@protoc_insertion_point(field_get:CameraDataRequest.image)
  return _internal_image();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraDataRequest::set_image(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.image_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CameraDataRequest.image)
}
inline std::string* CameraDataRequest::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:CameraDataRequest.image)
  return _s;
}
inline const std::string& CameraDataRequest::_internal_image() const {
  return _impl_.image_.Get();
}
inline void CameraDataRequest::_internal_set_image(const std::string& value) {
  ;


  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraDataRequest::_internal_mutable_image() {
  ;
  return _impl_.image_.Mutable( GetArenaForAllocation());
}
inline std::string* CameraDataRequest::release_image() {
  // @@protoc_insertion_point(field_release:CameraDataRequest.image)
  return _impl_.image_.Release();
}
inline void CameraDataRequest::set_allocated_image(std::string* value) {
  _impl_.image_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_.IsDefault()) {
          _impl_.image_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CameraDataRequest.image)
}

// string timestamp = 2;
inline void CameraDataRequest::clear_timestamp() {
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& CameraDataRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:CameraDataRequest.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraDataRequest::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CameraDataRequest.timestamp)
}
inline std::string* CameraDataRequest::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:CameraDataRequest.timestamp)
  return _s;
}
inline const std::string& CameraDataRequest::_internal_timestamp() const {
  return _impl_.timestamp_.Get();
}
inline void CameraDataRequest::_internal_set_timestamp(const std::string& value) {
  ;


  _impl_.timestamp_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraDataRequest::_internal_mutable_timestamp() {
  ;
  return _impl_.timestamp_.Mutable( GetArenaForAllocation());
}
inline std::string* CameraDataRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:CameraDataRequest.timestamp)
  return _impl_.timestamp_.Release();
}
inline void CameraDataRequest::set_allocated_timestamp(std::string* value) {
  _impl_.timestamp_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timestamp_.IsDefault()) {
          _impl_.timestamp_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CameraDataRequest.timestamp)
}

// int32 frameNumber = 3;
inline void CameraDataRequest::clear_framenumber() {
  _impl_.framenumber_ = 0;
}
inline ::int32_t CameraDataRequest::framenumber() const {
  // @@protoc_insertion_point(field_get:CameraDataRequest.frameNumber)
  return _internal_framenumber();
}
inline void CameraDataRequest::set_framenumber(::int32_t value) {
  _internal_set_framenumber(value);
  // @@protoc_insertion_point(field_set:CameraDataRequest.frameNumber)
}
inline ::int32_t CameraDataRequest::_internal_framenumber() const {
  return _impl_.framenumber_;
}
inline void CameraDataRequest::_internal_set_framenumber(::int32_t value) {
  ;
  _impl_.framenumber_ = value;
}

// -------------------------------------------------------------------

// CameraDataResponse

// string acknowledgment = 1;
inline void CameraDataResponse::clear_acknowledgment() {
  _impl_.acknowledgment_.ClearToEmpty();
}
inline const std::string& CameraDataResponse::acknowledgment() const {
  // @@protoc_insertion_point(field_get:CameraDataResponse.acknowledgment)
  return _internal_acknowledgment();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraDataResponse::set_acknowledgment(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.acknowledgment_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CameraDataResponse.acknowledgment)
}
inline std::string* CameraDataResponse::mutable_acknowledgment() {
  std::string* _s = _internal_mutable_acknowledgment();
  // @@protoc_insertion_point(field_mutable:CameraDataResponse.acknowledgment)
  return _s;
}
inline const std::string& CameraDataResponse::_internal_acknowledgment() const {
  return _impl_.acknowledgment_.Get();
}
inline void CameraDataResponse::_internal_set_acknowledgment(const std::string& value) {
  ;


  _impl_.acknowledgment_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraDataResponse::_internal_mutable_acknowledgment() {
  ;
  return _impl_.acknowledgment_.Mutable( GetArenaForAllocation());
}
inline std::string* CameraDataResponse::release_acknowledgment() {
  // @@protoc_insertion_point(field_release:CameraDataResponse.acknowledgment)
  return _impl_.acknowledgment_.Release();
}
inline void CameraDataResponse::set_allocated_acknowledgment(std::string* value) {
  _impl_.acknowledgment_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.acknowledgment_.IsDefault()) {
          _impl_.acknowledgment_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CameraDataResponse.acknowledgment)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_camera_5fservice_2eproto_2epb_2eh
