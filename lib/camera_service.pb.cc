// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_service.proto

#include "camera_service.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
template <typename>
PROTOBUF_CONSTEXPR CameraDataRequest::CameraDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.framenumber_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CameraDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraDataRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraDataRequestDefaultTypeInternal() {}
  union {
    CameraDataRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraDataRequestDefaultTypeInternal _CameraDataRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CameraDataResponse::CameraDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.acknowledgment_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CameraDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraDataResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraDataResponseDefaultTypeInternal() {}
  union {
    CameraDataResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraDataResponseDefaultTypeInternal _CameraDataResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_camera_5fservice_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_camera_5fservice_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_camera_5fservice_2eproto = nullptr;
const ::uint32_t TableStruct_camera_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CameraDataRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CameraDataRequest, _impl_.image_),
    PROTOBUF_FIELD_OFFSET(::CameraDataRequest, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::CameraDataRequest, _impl_.framenumber_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CameraDataResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CameraDataResponse, _impl_.acknowledgment_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::CameraDataRequest)},
        { 11, -1, -1, sizeof(::CameraDataResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_CameraDataRequest_default_instance_._instance,
    &::_CameraDataResponse_default_instance_._instance,
};
const char descriptor_table_protodef_camera_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024camera_service.proto\"J\n\021CameraDataRequ"
    "est\022\r\n\005image\030\001 \001(\014\022\021\n\ttimestamp\030\002 \001(\t\022\023\n"
    "\013frameNumber\030\003 \001(\005\",\n\022CameraDataResponse"
    "\022\026\n\016acknowledgment\030\001 \001(\t2J\n\rCameraServic"
    "e\0229\n\016SendCameraData\022\022.CameraDataRequest\032"
    "\023.CameraDataResponseb\006proto3"
};
static ::absl::once_flag descriptor_table_camera_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_camera_5fservice_2eproto = {
    false,
    false,
    228,
    descriptor_table_protodef_camera_5fservice_2eproto,
    "camera_service.proto",
    &descriptor_table_camera_5fservice_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_camera_5fservice_2eproto::offsets,
    file_level_metadata_camera_5fservice_2eproto,
    file_level_enum_descriptors_camera_5fservice_2eproto,
    file_level_service_descriptors_camera_5fservice_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_camera_5fservice_2eproto_getter() {
  return &descriptor_table_camera_5fservice_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_camera_5fservice_2eproto(&descriptor_table_camera_5fservice_2eproto);
// ===================================================================

class CameraDataRequest::_Internal {
 public:
};

CameraDataRequest::CameraDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CameraDataRequest)
}
CameraDataRequest::CameraDataRequest(const CameraDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.framenumber_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.image_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    _this->_impl_.image_.Set(from._internal_image(), _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), _this->GetArenaForAllocation());
  }
  _this->_impl_.framenumber_ = from._impl_.framenumber_;
  // @@protoc_insertion_point(copy_constructor:CameraDataRequest)
}

inline void CameraDataRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.image_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.framenumber_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.image_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CameraDataRequest::~CameraDataRequest() {
  // @@protoc_insertion_point(destructor:CameraDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraDataRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.Destroy();
  _impl_.timestamp_.Destroy();
}

void CameraDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CameraDataRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _impl_.framenumber_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CameraDataRequest.timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 frameNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.framenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CameraDataRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CameraDataRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (!this->_internal_image().empty()) {
    const std::string& _s = this->_internal_image();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // string timestamp = 2;
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "CameraDataRequest.timestamp");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 frameNumber = 3;
  if (this->_internal_framenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_framenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CameraDataRequest)
  return target;
}

::size_t CameraDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CameraDataRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 1;
  if (!this->_internal_image().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_image());
  }

  // string timestamp = 2;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // int32 frameNumber = 3;
  if (this->_internal_framenumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_framenumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraDataRequest::GetClassData() const { return &_class_data_; }


void CameraDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraDataRequest*>(&to_msg);
  auto& from = static_cast<const CameraDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CameraDataRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _this->_internal_set_image(from._internal_image());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_framenumber() != 0) {
    _this->_internal_set_framenumber(from._internal_framenumber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraDataRequest::CopyFrom(const CameraDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CameraDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDataRequest::IsInitialized() const {
  return true;
}

void CameraDataRequest::InternalSwap(CameraDataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.image_, lhs_arena,
                                       &other->_impl_.image_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, lhs_arena,
                                       &other->_impl_.timestamp_, rhs_arena);

  swap(_impl_.framenumber_, other->_impl_.framenumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camera_5fservice_2eproto_getter, &descriptor_table_camera_5fservice_2eproto_once,
      file_level_metadata_camera_5fservice_2eproto[0]);
}
// ===================================================================

class CameraDataResponse::_Internal {
 public:
};

CameraDataResponse::CameraDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CameraDataResponse)
}
CameraDataResponse::CameraDataResponse(const CameraDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.acknowledgment_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.acknowledgment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.acknowledgment_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_acknowledgment().empty()) {
    _this->_impl_.acknowledgment_.Set(from._internal_acknowledgment(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CameraDataResponse)
}

inline void CameraDataResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.acknowledgment_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.acknowledgment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.acknowledgment_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CameraDataResponse::~CameraDataResponse() {
  // @@protoc_insertion_point(destructor:CameraDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraDataResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.acknowledgment_.Destroy();
}

void CameraDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CameraDataResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.acknowledgment_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string acknowledgment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_acknowledgment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CameraDataResponse.acknowledgment"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CameraDataResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CameraDataResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string acknowledgment = 1;
  if (!this->_internal_acknowledgment().empty()) {
    const std::string& _s = this->_internal_acknowledgment();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "CameraDataResponse.acknowledgment");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CameraDataResponse)
  return target;
}

::size_t CameraDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CameraDataResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string acknowledgment = 1;
  if (!this->_internal_acknowledgment().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_acknowledgment());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraDataResponse::GetClassData() const { return &_class_data_; }


void CameraDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraDataResponse*>(&to_msg);
  auto& from = static_cast<const CameraDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CameraDataResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_acknowledgment().empty()) {
    _this->_internal_set_acknowledgment(from._internal_acknowledgment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraDataResponse::CopyFrom(const CameraDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CameraDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDataResponse::IsInitialized() const {
  return true;
}

void CameraDataResponse::InternalSwap(CameraDataResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.acknowledgment_, lhs_arena,
                                       &other->_impl_.acknowledgment_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camera_5fservice_2eproto_getter, &descriptor_table_camera_5fservice_2eproto_once,
      file_level_metadata_camera_5fservice_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CameraDataRequest*
Arena::CreateMaybeMessage< ::CameraDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CameraDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CameraDataResponse*
Arena::CreateMaybeMessage< ::CameraDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CameraDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
